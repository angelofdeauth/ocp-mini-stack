#################################################################################
# Install Base Packates
dnf  update  -y
dnf  install -y \
            m4 \
            xz \
            tar \
            git \
            gcc \
            gzip \
            gawk \
            dkms \
            flex \
            tmux \
            htop \
            make \
            xmlto \
            iperf3 \
            grubby \
            gettext \
            openssl \
            glances \
            hmaccalc \
            hostname \
            neofetch \
            findutils \
            rpm-build \
            net-tools \
            zlib-devel \
            java-devel \
            newt-devel \
            vim-enhanced \
            kernel-tools \
            kernel-devel \
            numactl-devel \
            ncurses-devel \
            kernel-headers \
            openssh-server \
            elfutils-devel \
            module-init-tools \
            elfutils-libelf-devel

#################################################################################
# Install Libvirt/KVM/QEMU Tools & Utilities
dnf  install -y \
            libvirt             \
            libvirt             \
            qemu-kvm            \
            virt-top            \
            qemu-kvm            \
            qemu-img            \
            edk2-ovmf           \
            virt-viewer         \
            virt-manager        \
            virt-install        \
            libvirt-client      \
            python3-libvirt     \
            libguestfs-tools    \
            libvirt-daemon-kvm  \
            libguestfs-tools-c  \
            libvirt-daemon-qemu 

#################################################################################
# Install OpenVSwitch Components
dnf  install -y
            openvswitch 
            network-scripts-openvswitch

#################################################################################
# Install LXD Stack
dnf  install -y snapd
snap install snapd ; snap install lxd


#################################################################################
# Extra (OPTIONAL)
pip install --upgrade glances
bash <(curl -Ss https://my-netdata.io/kickstart.sh)

#################################################################################
# SSH Setup
systemctl enable --now sshd
chmod 600 .ssh/*
systemctl set-default multi-user.target

#################################################################################
# Kernel Modules & Argument Setup
sed -i 's/GRUB_TERMINAL_OUTPUT="console"/GRUB_TERMINAL_OUTPUT="serial"/g' \
    /etc/default/grub
echo \
  'GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1"' \
  >>/etc/default/grub

grub2-mkconfig -o /boot/grub2/grub.cfg
grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg

grubby --update-kernel=ALL --remove-args="quiet splash"
grubby --update-kernel=ALL --args="intel_iommu=on iommu=pt kvm-intel.nested=1 kvm_intel.nested=1 net.ifnames=0 biosdevname=0 pci=noaer console=ttyS0,115200n8"

echo "options kvm_intel nested=1" | sudo tee /etc/modprobe.d/qemu-system-x86.conf
modprobe -r kvm-intel

update-alternatives --set editor /usr/bin/vim


#################################################################################
# Host & Virtual Network Setup

export external_NIC="eth0"

cat <<EOF >/etc/systemd/network/${external_NIC}.network                                                    
[Match]
Name=${external_NIC}
[Network]
DHCP=no
IPv6AcceptRA=no
LinkLocalAddressing=no
EOF

systemctl enable systemd-resolved.service
systemctl enable --now systemd-networkd.service
systemctl status systemd-networkd

systemctl stop NetworkManager
systemctl disable NetworkManager

rm /etc/resolv.conf
ln -f -s /usr/lib/systemd/resolv.conf /etc/resolv.conf

cat /etc/resolv.conf 

mkdir /etc/systemd/network

export external_NIC="eth0"
cat <<EOF >/etc/systemd/network/external.network                                                    
[Match]
Name=external
[Network]
DHCP=no
IPv6AcceptRA=no
LinkLocalAddressing=no
EOF

cat <<EOF >/etc/systemd/network/internal.network                                                    
[Match]
Name=internal
[Network]
DHCP=no
IPv6AcceptRA=no
LinkLocalAddressing=no
EOF

cat <<EOF >/usr/bin/ovs-clear
#!/bin/bash
# ovs-clear - This script will search and destroy orphaned ovs port
for i in \$(ovs-vsctl show | awk '/error: /{print \$7}'); do
ovs-vsctl del-port \$i;
done
clear && ovs-vsctl show
EOF

chmod +x /usr/bin/ovs-clear && ovs-clear

systemctl enable --now ovsdb-server
systemctl enable --now ovs-vswitchd
ovs-vsctl show

cat <<EOF >/tmp/external-mgmt0-setup
net_restart () {
  ovs-vsctl add-br external \
     -- add-port external ${external_NIC} \
     -- add-port external mgmt0           \
     -- set interface mgmt0 type=internal \
     -- set interface mgmt0 mac="$(echo "${HOSTNAME} external mgmt0" \
                                  | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02\\:\1\\:\2\\:\3\\:\4\\:\5/')"
  systemctl restart systemd-networkd.service && netplan apply --debug
  ovs-clear
}
net_restart
EOF

ln /tmp/external-mgmt0-setup ~

cat <<EOF >/tmp/internal-mgmt1-setup
  ovs-vsctl add-br internal \
     -- add-port internal mgmt1 \
     -- set interface mgmt1 type=internal \
     -- set interface mgmt1 mac="$(echo "$HOSTNAME internal mgmt1" \
                                  | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02\\:\1\\:\2\\:\3\\:\4\\:\5/')"
systemctl restart systemd-networkd.service && netplan apply --debug
ovs-clear
EOF

ln /tmp/internal-mgmt1-setup ~

#################################################################################
# Snapd
ln -s /var/lib/snapd/snap /snap
usermod -aG lxd kmorgan

cp -r /home/kmorgan/.ssh ~
chown root:root -R ~/.ssh

#################################################################################
# Libvirt KVM
cat /proc/cpuinfo | egrep "vmx|svm"

systemctl enable --now libvirtd
systemctl status libvirtd

shutdown -r now

dmesg | grep -E "DMAR|IOMMU"
modprobe vfio-pci
echo 'vfio-pci' > /etc/modules-load.d/vfio-pci.conf
  538  /usr/libexec/qemu-kvm -machine help
cp /etc/systemd/network/eth0.network /etc/systemd/network/mgmt0.network
ln /etc/systemd/network/mgmt0.network .
ln /etc/systemd/network/eth0.network .
ln /etc/systemd/network/external.network .

ln -sfv /run/systemd/resolve/resolv.conf /etc/resolv.conf 
systemctl restart systemd-networkd
snap switch --channel=edge lxd
snap refresh
lxc version
lxd version

ln /etc/systemd/network/internal.network .
ln /etc/systemd/network/mgmt1.network .

mkdir ~/.bak 2>/dev/null \
  ; virsh net-dumpxml default | tee ~/.bak/virsh-net-default-bak.xml \
  ; virsh net-destroy default && virsh net-undefine default

cat <<EOF >/tmp/virsh-net-default-on-internal.json
<network>
  <name>default</name>
  <forward mode='bridge'/>
  <bridge name='internal' />
  <virtualport type='openvswitch'/>
</network>
EOF

cat <<EOF >/tmp/virsh-net-internal-on-internal.json
<network>
  <name>internal</name>
  <forward mode='bridge'/>
  <bridge name='internal' />
  <virtualport type='openvswitch'/>
</network>
EOF

cat <<EOF >/tmp/virsh-net-external-on-external.json
<network>
  <name>external</name>
  <forward mode='bridge'/>
  <bridge name='external' />
  <virtualport type='openvswitch'/>
</network>
EOF

for json in virsh-net-default-on-internal.json virsh-net-internal-on-internal.json virsh-net-external-on-external.json; do virsh net-define /tmp/${json}; done

for virshet in external default internal; do virsh net-start ${virshet}; virsh net-autostart ${virshet}; done

sudo virsh net-list --all
