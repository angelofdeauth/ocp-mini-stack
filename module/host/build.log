#################################################################################
# Install Base Packates
dnf  update  -y
dnf  install -y \
            m4 \
            xz \
            tar \
            git \
            gcc \
            gzip \
            gawk \
            dkms \
            flex \
            tmux \
            htop \
            make \
            xmlto \
            iperf3 \
            grubby \
            gettext \
            openssl \
            glances \
            hmaccalc \
            hostname \
            neofetch \
            findutils \
            rpm-build \
            net-tools \
            zlib-devel \
            java-devel \
            newt-devel \
            vim-enhanced \
            kernel-tools \
            kernel-devel \
            numactl-devel \
            ncurses-devel \
            kernel-headers \
            openssh-server \
            elfutils-devel \
            module-init-tools \
            elfutils-libelf-devel

#################################################################################
# Install Libvirt/KVM/QEMU Tools & Utilities
dnf  install -y \
            libvirt             \
            libvirt             \
            qemu-kvm            \
            virt-top            \
            qemu-kvm            \
            qemu-img            \
            edk2-ovmf           \
            virt-viewer         \
            virt-manager        \
            virt-install        \
            libvirt-client      \
            python3-libvirt     \
            libguestfs-tools    \
            libvirt-daemon-kvm  \
            libguestfs-tools-c  \
            libvirt-daemon-qemu 

#################################################################################
# Install OpenVSwitch Components
dnf  install -y openvswitch network-scripts-openvswitch

#################################################################################
# Install LXD Stack
dnf  install -y snapd
sleep 4 ; snap install snapd ; snap install lxd
ln -s /var/lib/snapd/snap /snap

#################################################################################
# Kernel Modules & Argument Setup
echo 'options kvm_intel nested=1' >/etc/modprobe.d/qemu-system-x86.conf
echo 'vfio-pci'                   >/etc/modules-load.d/vfio-pci.conf

grubby --update-kernel=ALL --remove-args="quiet splash"
grubby --update-kernel=ALL --args="intel_iommu=on iommu=pt kvm-intel.nested=1 kvm_intel.nested=1 net.ifnames=0 biosdevname=0 pci=noaer console=ttyS0,115200n8"

sed  -i 's/GRUB_TERMINAL_OUTPUT="console"/GRUB_TERMINAL_OUTPUT="serial"/g'                     /etc/default/grub
echo    'GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1"' >>/etc/default/grub

grub2-mkconfig -o /boot/grub2/grub.cfg
grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg

modprobe -r kvm-intel
modprobe -r vfio-pci

shutdown -r now

#################################################################################
# Host & Virtual Network Setup

mkdir -p /etc/systemd/network
export external_NIC="eth0"

cat <<EOF >/etc/systemd/network/${external_NIC}.network
[Match]
Name=${external_NIC}
[Network]
DHCP=no
IPv6AcceptRA=no
LinkLocalAddressing=no
EOF

cat <<EOF >/etc/systemd/network/external.network
[Match]
Name=external
[Network]
DHCP=no
IPv6AcceptRA=no
LinkLocalAddressing=no
EOF

cat /etc/systemd/network/mgmt0.network 
[Match]
Name=mgmt0

[Network]
DHCP=no
DNS=8.8.8.8
DNS=8.8.4.4
DNS=1.1.1.1
IPv6AcceptRA=no
LinkLocalAddressing=no
Address=10.0.0.62/24
Gateway=10.0.0.1
Domains=ministack.dev

[Link]
#MACAddress=02:49:92:7d:ae:1c
EOF

cat <<EOF >/etc/systemd/network/internal.network
[Match]
Name=internal
[Network]
DHCP=no
IPv6AcceptRA=no
LinkLocalAddressing=no
EOF

cat <<EOF >/tmp/external-mgmt0-setup
#!/bin/bash
set -x
run_net_setup () {
 systemctl disable NetworkManager
 systemctl stop    NetworkManager
 systemctl enable --now ovs-vswitchd
 ovs-vsctl add-br external \
  -- add-port external ${external_NIC} \
  -- add-port external mgmt0           \
  -- set interface mgmt0 type=internal \
  -- set interface mgmt0 mac="$(echo "${HOSTNAME} external mgmt0" \
   | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02\\:\1\\:\2\\:\3\\:\4\\:\5/')"
 rm -rf /etc/resolv.conf
 ln -fs /usr/lib/systemd/resolv.conf /etc/resolv.conf
 systemctl enable --now systemd-networkd.service
 systemctl enable --now systemd-resolved.service
ovs-clear
}
run_net_setup
EOF

cat <<EOF >/tmp/internal-mgmt1-setup
#!/bin/bash
set -e
set -x
ovs-vsctl add-br internal \
 -- add-port internal mgmt1 \
 -- set interface mgmt1 type=internal \
 -- set interface mgmt1 mac="$(echo "$HOSTNAME internal mgmt1" \
  | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02\\:\1\\:\2\\:\3\\:\4\\:\5/')"
systemctl restart systemd-networkd.service
ovs-clear
EOF

cat <<EOF >/usr/bin/ovs-clear
#!/bin/bash
run_ovs_clear () {
for i in \$(ovs-vsctl show | awk '/error: /{print \$7}'); do
  ovs-vsctl del-port \$i;
done
clear && ovs-vsctl show
}
run_ovs_clear
EOF

chmod +x /usr/bin/ovs-clear

. /tmp/external-mgmt0-setup
. /tmp/internal-mgmt1-setup

ovs-vsctl show
ovs-clear

ln /etc/systemd/network/eth0.network ~
ln /etc/systemd/network/mgmt0.network ~
ln /etc/systemd/network/mgmt1.network ~
ln /etc/systemd/network/external.network ~
ln /etc/systemd/network/internal.network ~
ln /tmp/external-mgmt0-setup ~
ln /tmp/internal-mgmt1-setup ~
ln -sfv /run/systemd/resolve/resolv.conf /etc/resolv.conf 

#################################################################################
# Libvirt KVM
systemctl enable --now libvirtd
systemctl status       libvirtd

mkdir ~/.bak 2>/dev/null \
  ; virsh net-dumpxml default | tee ~/.bak/virsh-net-default-bak.xml \
  ; virsh net-destroy default && virsh net-undefine default

cat <<EOF >/tmp/virsh-net-default-on-internal.json
<network>
  <name>default</name>
  <forward mode='bridge'/>
  <bridge name='internal' />
  <virtualport type='openvswitch'/>
</network>
EOF

cat <<EOF >/tmp/virsh-net-internal-on-internal.json
<network>
  <name>internal</name>
  <forward mode='bridge'/>
  <bridge name='internal' />
  <virtualport type='openvswitch'/>
</network>
EOF

cat <<EOF >/tmp/virsh-net-external-on-external.json
<network>
  <name>external</name>
  <forward mode='bridge'/>
  <bridge name='external' />
  <virtualport type='openvswitch'/>
</network>
EOF

for json in virsh-net-default-on-internal.json virsh-net-internal-on-internal.json virsh-net-external-on-external.json; do virsh net-define /tmp/${json}; done

for virshet in external default internal; do virsh net-start ${virshet}; virsh net-autostart ${virshet}; done

virsh net-list --all

#################################################################################
# Init LXD
usermod -aG lxd kmorgan

snap switch --channel=edge lxd
snap refresh

lxd version
lxc version

#################################################################################
# Extra (OPTIONAL)
pip install --upgrade glances
bash <(curl -Ss https://my-netdata.io/kickstart.sh)
update-alternatives --set editor /usr/bin/vim
cp -r /home/kmorgan/.ssh ~
chown root:root -R ~/.ssh
/usr/libexec/qemu-kvm -machine help
cat /proc/cpuinfo | egrep "vmx|svm"
dmesg | grep -E "DMAR|IOMMU"

#################################################################################
# SSH Setup
systemctl enable --now sshd
chmod 600 .ssh/*
systemctl set-default multi-user.target
