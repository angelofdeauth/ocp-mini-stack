#---------------------------------------------------------------------
# CCIO OCP MiniStack Application Router
#
# Syntax Verified:
#
# sudo podman run -it --rm --name haproxy-test \
#   -v ~/.ccio/Git/ocp-mini-stack/module/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro\
#   haproxy \
#     -c -f /usr/local/etc/haproxy/haproxy.cfg
#
# RUN:
#
# sudo podman run \
#                  -d \
#                 --name ocp-haproxy \
#                  -p 80:80 \
#                  -p 443:443 \
#                  -v ~/.ccio/ocp-mini-stack/module/haproxy/aux/lib/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro \
#                  -v ~/.ccio/ocp-mini-stack/module/haproxy/aux/lib/errors/:/usr/local/etc/haproxy/errors:ro          \
#                 haproxy:latest
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    maxconn     20000
    daemon

    # Error Handling
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

    # Enable Logs & Stats unix socket
    # log          /dev/log local0 info
    # stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          300s
    timeout server          300s
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 20000

listen      stats
    bind    :9000
    mode    http
    stats   enable
    stats   uri /

#---------------------------------------------------------------------
# SSH Connection Handler
frontend ingress-ssh
    default_backend      ingress-ssh
    bind                 *:2022
    mode                 tcp
    option               tcplog

backend                  ingress-ssh
    mode                 tcp
    server      cloudctl 10.10.10.3:22

#---------------------------------------------------------------------
# OCP API LB
frontend                 openshift-api-server
    default_backend      openshift-api-server
    bind                 *:6443
    mode                 tcp
    option               tcplog

backend                  openshift-api-server
    balance              source
    mode                 tcp
    server     bootstrap 172.10.0.30:6443  check
    server       infra01 172.10.1.31:6443  check
    server       infra02 172.10.1.32:6443  check
    server       infra03 172.10.1.33:6443  check
#---------------------------------------------------------------------
# Machine Config Request LB
frontend                 machine-config-server
    default_backend      machine-config-server
    bind                 *:22623
    mode                 tcp
    option               tcplog

backend                  machine-config-server
    balance              source
    mode                 tcp
    server     bootstrap 172.10.0.30:22623 check
    server       infra01 172.10.1.31:22623 check
    server       infra02 172.10.1.32:22623 check
    server       infra03 172.10.1.33:22623 check

#---------------------------------------------------------------------
# HTTP Traffic LB
frontend                 ingress-http
    default_backend      ingress-http
    bind                 *:80
    mode                 tcp
    option               tcplog

backend                  ingress-http
    balance              source
    mode                 tcp
    server       infra01 172.10.1.31:443   check
    server       infra02 172.10.1.32:443   check
    server       infra03 172.10.1.33:443   check
    server      worker01 172.10.2.41:80    check
    server      worker02 172.10.2.42:80    check

#---------------------------------------------------------------------
# HTTPS Traffic LB
frontend                 ingress-https
    default_backend      ingress-https
    bind                 *:443
    mode                 tcp
    option               tcplog

backend                  ingress-https
    balance              source
    mode                 tcp
    server       infra01 172.10.1.31:443   check
    server       infra02 172.10.1.32:443   check
    server       infra03 172.10.1.33:443   check
    server      worker01 172.10.2.41:443   check
    server      worker02 172.10.2.42:443   check
