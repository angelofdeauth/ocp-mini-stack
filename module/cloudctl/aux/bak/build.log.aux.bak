watch -c curl --insecure -k  https://api.ocp4.ministack.dev:22623/config/master -I
curl --insecure -k  https://api.ocp4.ministack.dev:22623/config/master -I
curl --insecure -k  https://api.ocp4.ministack.dev:22623/config/master 
curl --insecure -k  https://api.ocp4.ministack.dev:22623/config/master --output master
file master 
vim master 
cat master | jq
dnf install jq -y
sudo dnf install jq -y
cat master | jq
cat master | jq | more
cat master | jq | pager
cat master | jq | less -R
jq -C master 
jq -C . master | less -R
curl --insecure -k  https://bootstrap.ocp4.ministack.dev:22623/config/master --output master
rm master 
curl --insecure -k  https://bootstrap.ocp4.ministack.dev:22623/config/master --output master
jq -C . master | less -R
curl --insecure -k  https://master1.ocp4.ministack.dev:22623/config/master --output master
curl --insecure -k  https://bootstrap.ocp4.ministack.dev:22623/config/master --output master
jq -C . master | less -R
watch -c curl --insecure -k  https://api.ocp4.ministack.dev:22623/config/master -I
curl --insecure -k  https://bootstrap.ocp4.ministack.dev:22623/config/master --output master
watch -c curl --insecure -k  https://api.ocp4.ministack.dev:22623/config/master -I
watch -c curl --insecure -k https://api-int.ocp4.ministack.dev:22623/config/master: -I
curl --insecure -k https://api-int.ocp4.ministack.dev:22623/config/master: -I
curl --insecure -k https://api-int.ocp4.ministack.dev:22623/config/master -I
cd ignition/
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc get nodes
oc api-resources
oc get nodes
oc whoami
oc get nodes
watch -c oc get nodes
export KUBECONFIG=$(pwd)/auth/kubeconfig
cd ocp4/
export KUBECONFIG=$(pwd)/auth/kubeconfig
watch -c oc get nodes
curl https://api.ocp4.ministack.dev:6443
curl --insecure https://api.ocp4.ministack.dev:6443
curl --insecure https://api.ocp4.ministack.dev:6443/healthz
curl --insecure https://bootstrap.ocp4.ministack.dev:6443/healthz
curl --insecure https://master1.ocp4.ministack.dev:6443/healthz
curl --insecure https://master1.ocp4.ministack.dev:644
curl --insecure https://master1.ocp4.ministack.dev:6443/version
curl --insecure https://bootstrap.ocp4.ministack.dev:6443/version
curl --insecure https://api.ocp4.ministack.dev:6443/version
lxc list
vim .ssh/config 
lxc file edit dnsmasq/root/.ssh/authorized_keys < ./.ssh/id_rsa.pub 
echo "" > ~/.ssh/known_hosts
virsh console bootstrap.ocp4.ministack.dev
virsh console master01.ocp4.ministack.dev
virsh list 
virsh console master1.ocp4.ministack.dev
curl -k  https://api.ocp4.ministack.dev:22623/config/master -I
curl --insecure -k  https://api.ocp4.ministack.dev:22623/config/master -I
virsh console bootstrap
virsh console bootstrap.ocp4.braincraft.io
virsh console bootstrap.ocp4.ministack.dev
virsh console bootstrap.ocp4.ministack.dev
virsh console bootstrap.ocp4.ministack.dev
virsh console bootstrap.ocp4.ministack.dev
cat /etc/hosts
cd ignition/
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc api-resources
digdig -x 172.30.1.31
dig -x 172.30.1.31
ping api-int.ocp4.ministack.dev
ping api.ocp4.ministack.dev
dig master1.ocp4.ministack.dev
ping master1.ocp4.ministack.dev
ssh core@master1.ocp4.ministack.dev -i ~/.ssh/id_rsa
lxc stop hostapd
lxc exec gateway ash
virsh console master1.ocp4.ministack.dev
virsh list --all
virsh destroy worker03.ocp4.ministack.dev
cd ocp4/
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc get logs
virsh list --all
virsh destroy worker03.ocp4.ministack.dev
virsh list --all
cd ocp-mini-stack/
cd module/cloudctl/
cd ../host
alias
watch -c virsh -c qemu+ssh://root@10.10.20.2/system
ln -s /home/kmorgan/ocp-mini-stack/module/cloudctl/ocp4 /home/kmorgan/
cd ocp4/
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc get csr
oc get endpoints -A | less
watch -c oc get endpoints -A 
oc whoami --show-console 
oc whoami --show-token
oc login -u kubeadmin
oc whoami --show-token
oc whoami --show-console 
htproxy
virsh edit master1.ocp4.ministack.dev
lxc list
virsh console master0.ocp4.ministack.dev
cat ~/.ssh/id_rsa.pub 
scp -rp carrier:/root/inventory/pxelinux.cfg tftp:/tftpboot/
scp carrier:/root/inventory/ethers dnsmasq:/etc/ethers
virsh console master0.ocp4.ministack.dev
dig master0
scp carrier:/root/inventory/ethers dnsmasq:/etc/ethers
virsh console master0.ocp4.ministack.dev
virsh console master1.ocp4.ministack.dev
ssh core@bootstrap -i ~/.ssh/id_rsa
dig bootstrap
dig bootstrap.ocp4.ministack.dev
dig bootstrap
dig bootstrap.ocp4.ministack.dev
dig bootstrap
dig bootstrap.ocp4.ministack.dev
dig bootstrap
dig bootstrap.ocp4.ministack.dev
dig bootstrap
ssh core@bootstrap.ocp4.ministack.dev -i ~/.ssh/id_rsa
lxcls
lxc list
ping 172.30.0.7
lxc list
dig carrier.ministack.dev
lxc list
lxc list
scp -rp carrier.ministack.dev:/root/inventory/pxelinux.0 tftp:/tftpboot/
scp -rp carrier.ministack.dev:/root/inventory/pxelinux.0 tftp:/tftpboot
scp -rp carrier.ministack.dev:/root/inventory/pxelinux.0/ tftp:/tftpboot/pxelinux.0
scp carrier.ministack.dev:/root/inventory/pxelinux.0/* tftp:/tftpboot/pxelinux.0/
scp -rp carrier.ministack.dev:/root/inventory/pxelinux.0/ tftp:/tftpboot/pxelinux.cfg
scp -rp carrier.ministack.dev:/root/inventory/pxelinux.cfg tftp:/tftpboot/
scp -rp carrier.ministack.dev:/root/inventory/ethers dnsmasq:/etc/
ssh carrier
nslookup carrier
dig carrier
ssh carrier
sudo su
ssh carrier
ls -lah .ssh
virsh console bootstrap.ocp4.ministack.dev
ssh core@worker01 -i ~/.ssh/id_rsa
ssh core@worker1 -i ~/.ssh/id_rsa
ssh core@master1 -i ~/.ssh/id_rsa
cd ocp-mini-stack/zdoc/cloudctl/ignition/
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc status
oc get csr
oc status --suggest
oc get logs
oc get csr
oc get csr -A
oc get 
oc get -h
oc get nodes
oc api-resources
httpd
ssh core@master0 ~/.ssh/id_rsa
virsh list --all
ssh core@bootstrap -i ~/.ssh/id_rsa
lxc list
dnf install tmux -y
sudo dnf install tmux -y
openshift-install wait-for bootstrap-complete --log-level debug
cd ocp-mini-stack/zdoc/cloudctl/ignition/
openshift-install wait-for bootstrap-complete --log-level debug
openshift-install wait-for bootstrap-complete --log-level debug
grep braincraft *
sed -i 's/braincraft.io/ministack.dev/g' *
sed -i 's/braincraft.io/ministack.dev/g' auth/*
openshift-install wait-for bootstrap-complete --log-level debug
openshift-install wait-for bootstrap-complete --log-level debug
openshift-install wait-for bootstrap-complete --log-level debug
ssh core@master0.ocp4.ministack.dev -i ~/.ssh/id_rsa
ssh core@bootstrap.ocp4.ministack.dev -i ~/.ssh/id_rsa
dnf install speedtest-cli -y
sudo dnf install speedtest-cli -y
speedtest-cli 
sudo su
cd /tmp
curl https://api-int.ocp4.ministack.dev:22623/config/master
curl https://api-int.ocp4.ministack.dev:22623/config/master --insecure
lxc list
virsh console bootstrap.ocp4.ministack.dev
ssh core@bootstrap.ocp4.ministack.dev
yum --help | grep '-b'
man yum
ssh haproxy
cd ocp4
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc login -u kubeadmin -p $( cat ./auth/kubeadmin-password)
clear; oc login -u kubeadmin -p $( cat ./auth/kubeadmin-password)
oc get logs
oc logs
oc get pod authentication
oc get pods
oc get namespaces
oc project default
oc get pods
oc api-resources
oc get nodes
oc get pods
oc get pods -A
oc get pods -A | grep autn
  oc get operators
oc get nodes
clear; oc login -u kubeadmin -p $( cat ./auth/kubeadmin-password)
oc login -u kubeadmin -p $( cat ./auth/kubeadmin-password)
sudo chown kmorgan:kmorgan ./run-node-builds
s
sudo chown kmorgan:kmorgan ../run-node-builds
ls -lah
sudo chown kmorgan:kmorgan run-node-builds 
sudo mv run-node-builds ocp-mini-stack/module/host/aux/tools/
cd ocp-mini-stack/
history | grep wip
history | grep wip -i
history | grep git
git stage -A; git commit -m 'wip'; git push origin pre-alpha-00
virsh console bootstrap.ocp4.ministack.dev
cd ocp4
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc get csr
watch oc get csr
watch oc get csr -A
cat /etc/hosts
lxc list
lxc init ubuntu:t01
lxc image list images:
lxc init ubuntu: t01
lxc network attach openshift t01 eth0 eth0
lxc start t01
lxc exec t01 bash
lxc exec t01 bash
ssh t01
ssh root@t01
ssh t01 -i .ssh/id_rsa_kmorgan
cd ocp
cd ocp-mini-stack/module/cloudctl/
./secrets-stage 
vim install-config.yaml 
cd ocp4/
ls -lah\
ls -lah
rm -rf *
rm -rf ./.*
clear; ls
ls -lah
cp ../install-config.yaml .
vim install-config.yaml 
openshift-install create manifests
openshift-install create ignition-configs
scp bootstrap.ign master.ign worker.ign httpd:/var/www/html/ignition/
sudo cp auth/kubeconfig ~/.kube/authconfig -f
export KUBECONFIG=$(pwd)/auth/kubeconfig
virsh console worker3.ocp4.ministack.dev
virsh console master3.ocp4.ministack.dev
ssh core@master3.ocp4.ministack.dev
virsh console master3.ocp4.ministack.dev
ssh core@master3.ocp4.ministack.dev
ssh core@master1.ocp4.ministack.dev
oc get pods -A
oc get pods -A | grep auth
oc logs authentication-operator-5457df9894-v65wb  -n openshift-authentication-operator
oc logs authentication-operator-5457df9894-v65wb  -n openshift-authentication-operator | tee -a openshift-authentication-operator.log
lnav openshift-authentication-operator.log 
dnf install fpaste
wget https://raw.githubusercontent.com/kevr/hastebin/master/hastebin
chmod +x hastebin 
./hastebin $(cat ./auth
./hastebin $(cat openshift-authentication-operator.log)
cat openshift-authentication-operator.log | ./hastebin 
echo 'oc logs authentication-operator-5457df9894-v65wb  -n openshift-authentication-operator | tee -a openshift-authentication-operator.log' >>openshift-authentication-operator.log 
vim openshift-authentication-operator.log 
cat openshift-authentication-operator.log | ./hastebin 
cat openshift-console-operator.log | ./hastebin 
vim openshift-console-operator.log 
cat openshift-console-operator.log | ./hastebin 
watch -c oc get endpoints -A 
oc status
watch oc status
oc get pods
cd ocp4/
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc get pods
oc api-resources
oc get pods -A
oc get pods -A | less
cat auth/kubeadmin-password 
cat auth/kubeadmin-password ; echo
oc login -u kubeadmin -p F4CPG-XCGb7-77kkx-gMqIF
oc get csr
oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs oc adm certificate approve
oc get csr
oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'
oc get csr
oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs oc adm certificate approve
oc get csr
watch -c oc get csr
oc api-resources -A 
oc api-resources | grep auth
oc api-resources | grep oper
oc get clusteroperators -A
watch -c oc get clusteroperators -A
cd ocp4/
export KUBECONFIG=$(pwd)/auth/kubeconfig
watch -c oc get clusteroperators -A
cd ocp4
export KUBECONFIG=$(pwd)/auth/kubeconfig
watch oc get csr
openshift-install wait-for bootstrap-complete
virsh destroy bootstrap.ocp4.ministack.dev
openshift-install wait-for install-complete
clear; openshift-install wait-for install-complete
cd ocp4
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs oc adm certificate approve
clear; oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs oc adm certificate approve
dig https://oauth-openshift.apps.ocp4.ministack.dev/oauth/token +short
ig oauth-openshift.apps.ocp4.ministack.dev
curl --insecure https://oauth-openshift.apps.ocp4.ministack.dev/oauth/token 
cd ocp4/
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs oc adm certificate approve
oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'
watch -n5 oc get clusteroperators
openshift-install wait-for install-complete
mkdir trash
cd trash/
cd ../ocp4/
cd ocp-mini-stack/module/cloudctl/
rm -rf ocp4/
rm -rf ~/ocp4
vim install-config.yaml 
mkdir ocp4
ln -s $(pwd)
ln -s $(pwd)/ocp4 ~
cd ocp4/
openshift-install create manifests
cp ../install-config.yaml .
openshift-install create manifests
openshift-install create ignition-configs 
history | grep ign
scp bootstrap.ign master.ign worker.ign httpd:/var/www/html/ignition/
cd ocp4
export KUBECONFIG=$(pwd)/auth/kubeconfig
watch -c oc get nodes
cd ocp4
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc get clusterversion
watch -c oc get clusterversion
cd ocp4
watch -c oc get clusterversion
exit
cd ocp4
export KUBECONFIG=$(pwd)/auth/kubeconfig
oc get pods --all-namespaces
oc get pods --all-namespaces | grep auth
oc logs oc get pods --all-namespaces
oc get pods --all-namespaces | grep auth
oc logs openshift-authentication -n oauth-openshift-56d468f864-56xzv
oc logs oauth-openshift-56d468f864-56xzv 
oc logs oauth-openshift-56d468f864-56xzv -n openshift-authentication
oc get pods --all-namespaces | grep console
oc logs console-operator-7fbfcbfb56-cnbtw -n openshift-console-operator
oc logs console-operator-7fbfcbfb56-cnbtw -n openshift-console-operator | tee -a openshift-console-operator.log
ssh ssh master1.ocp4.ministack.dev
ssh master1
export KUBECONFIG=$(pwd)/auth/kubeconfig
cd ocp4
oc whoami --show-consoe
oc whoami --show-console
oc whoami
cat auth/kubeadmin-password 
history | grep kubeadmin
oc login -u kubeadmin $(cat ./auth/kubeadmin-password)
oc login -u kubeadmin -p $(cat ./auth/kubeadmin-password)
htpasswd -c -B -b </path/to/users.htpasswd> <user_name> <password>
htpasswd -c -B -b users.htpasswd kmorgan SECRETPASSWD
whatprovides htpasswd
dnf whatprovides htpasswd
dnf install httpd-tools
sudo dnf install httpd-tools
htpasswd -c -B -b users.htpasswd kmorgan SECRETPASSWD
cat users.htpasswd 
oc create secret generic htpass-secret --from-file=htpasswd=./users.htpasswd -n openshift-config
oc project openshift-config
oc get htpasswd
oc get secret htpass-secret
oc get secret htpass-secret -ojson
vim htpasswd.yaml
oc apply -f htpasswd.yaml 
oc whoami --show-console
cat auth/kubeadmin-password 
oc adm policy add-cluster-role-to-user cluster-admin kmorgan
cp htpasswd.yaml users.htpasswd ../ocp-mini-stack/module/cloudctl/
cp users.htpasswd ../ocp-mini-stack/module/cloudctl/
cp htpasswd.yaml users.htpasswd $HOME/ocp-mini-stack/module/cloudctl/
oc whoami --show-console
unlink ocp4/
unlink ocp4
cat master
rm master master.config 
cat install-config.yaml 
rm install-config.yaml 
cat bashrc 
ln -f .bashrc bashrc
cat ssh-config 
ln -f .ssh/config ssh-config 
cp bashrc ssh-config ocp-mini-stack/module/cloudctl/ -f
rm -rf trash/
rm bashrc ssh-config 
cd ocp-mini-stack/
cd module/
lxc list
cd tftp/
for i in AC1E00  AC1E01  build.log  build-tftp  default  eth1.network  README.md  tftp.service; do scp tftp:/root/$i .; done
lxc list
lxc delete --force t01
lxc profile list
lxc list
lxc config show tftp | tee tftp.lxd.profile.yaml
lxc list
lxc delete --force
lxc delete --force tftp
httpd
cd httpd/
for i in bootstrap.ign  httpd-build_a00.log  stage-install-config-yaml.sh  stage-pull-secrets.sh; do scp httpd:/root/$i .; done
lxc delete --force httpd
lxc list
lxc start hostapd
lxc exec hostapd bash
cd ../hostapd/
for i in build-hostapd.log  hostapd.conf  ifcfg-eth0  ifcfg-hostapd  iwlist; do scp hostapd:/root/$i .; done
cear
lxc list
lxc config show hostapd.conf | tee hostapd.conf.yaml
lxc config show hostapd | tee hostapd.conf.yaml
lxc profile list
lxc profile show hostapd | tee hostapd.profile.yaml
lxc list
lxc delete --force hostapd
lxc list
cd haproxy/
for i in build.log  eth1.network  haproxy.cfg; do scp haproxy:/root/$i .; done
lxc list
lxc list
lxc profile show haproxy
lxc profile list
lxc profile delete --force hostapd
lxc profile delete hostapd
clear; 
cd gateway/
lxc profile show openwrt | tee >>profile-lxd-openwrt.2.yaml 
cat profile-lxd-openwrt.2.yaml 
lxc list
lxc file pull -r gateway/etc/config .
lxc exec gateway ash
for i in ethers                  gw02.ministack.privkey  gw02.ministack.pubkey   hosts                   ocp4; do scp gateway:/root/$i .; done
for i in ethers                  gw02.ministack.privkey  gw02.ministack.pubkey   hosts                   ocp4; do lxc file pull gateway/root/$i .; done
lxc list
for i in build.log  dnsmasq.conf  dnsmasq.leases  eth1.network  ethers  hosts  resolv.conf; do scp dnsmasq:/root/$i .; done
lxc list
ls ~
cat build.log 
mv build.log dnsmasq/
mv dnsmasq* dnsmasq/
cat eth1.network 
mv eth1.network dnsmasq/
cat h
mv hosts resolv.conf dnsmasq/
mv tftp.lxd.profile.yaml tftp/
mv ethers dnsmasq/
cd cloudctl/
history >>build.log.2
ln /etc/systemd/network/eth1.network .
ln /etc/systemd/network/eth1.network . -f
sudo ln /etc/systemd/network/eth1.network . -f
history | grep git | grep stage
git stage -A; git commit -m "first heartbeat, working ministack openshift cloud full stack"; git push origin pre-alpha-00
git pull
cd module/haproxy/
history | grep haproxy
for i in build.log  eth1.network  haproxy.cfg; do scp haproxy:/root/$i .; done
cd ../..
git stage -A; git commit -m "first heartbeat, working ministack openshift cloud full stack"; git push origin pre-alpha-00
git checkout master
git pull
git fetch upstream
git remote add upstream git@github.com:containercraft/ocp-mini-stack.git
git fetch upstream
get checkout master
git checkout master
git merge upstream/master
rm README 
git merge upstream/master
git pull upstream master
git rm README
git merge upstream/master
git commit
git merge upstream/master
git pull
curl http://tftp.ministack.dev:8080/ipxe
curl http://tftp.ministack.dev:8080/ipxe?
export KUBECONFIG=$(pwd)/auth/kubeconfig
watch -c oc get nodes
openshift-install wait-for bootstrap-complete
openshift-install wait-for install-complete
virsh destroy bootstrap.ocp4.ministack.dev
oc whoami --getconsole
oc whoami --show-console
clear; openshift-install wait-for install-complete
virsh start worker01.ocp4.ministack.dev
virsh start worker02.ocp4.ministack.dev
watch oc get csr
cd ocp4
export KUBECONFIG=$(pwd)/auth/kubeconfig
watch oc get csr
oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'
oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs oc adm certificate approve
scp -rp carrier:~/inventory/pxelinux.cfg root@172.30.0.8:/tftpboot/
